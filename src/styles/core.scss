:global {
  @import 'base';
  @import '~normalize.css/normalize';

  // Some best-practice CSS that's useful for most apps
  // Just remove them if they're not what you want
  html {
    box-sizing: border-box;
  }

  html,
  body {
    margin: 0;
    padding: 0;
    height: 100%;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  @mixin vendor-prefix($name, $value) {
    @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
      #{$vendor}#{$name}: #{$value};
    }
  }

  $break-small: 640px;
  $break-large: 1024px;
  $break-huge: 1496px;

  @mixin respond-to($media) {
    @if $media == handhelds {
      @media only screen and (max-width: $break-small) { @content; }
    }
    @else if $media == medium-screens {
      @media only screen and (min-width: $break-small + 1) and (max-width: $break-large - 1) { @content; }
    }
    @else if $media == wide-screens {
      @media only screen and (min-width: $break-large + 1) and (max-width: $break-huge - 1) { @content; }
    }
    @else if $media == huge-screens {
      @media only screen and (min-width: $break-huge) { @content; }
    }
  }

  .food-list {
    margin-top: 25px;

    @include vendor-prefix('column-gap', '10px');

    @include respond-to(handhelds) { @include vendor-prefix('column-count', '1'); }
    @include respond-to(medium-screens) { @include vendor-prefix('column-count', '2'); }
    @include respond-to(wide-screens) { @include vendor-prefix('column-count', '3'); }
    @include respond-to(huge-screens) { @include vendor-prefix('column-count', '4'); }

    &.short {
      @include respond-to(handhelds) { @include vendor-prefix('column-count', '1'); }
      @include respond-to(medium-screens) { @include vendor-prefix('column-count', '2'); }
      @include respond-to(wide-screens) { @include vendor-prefix('column-count', '2'); }
    }

    .food {
      @include vendor-prefix('column-break-inside', 'avoid');
      padding: 5px;

      .panel {
        margin: 0;
      }
    }
  }
}
